import numpy as np
import random
import time
import csv
import matplotlib
matplotlib.use('TkAgg')
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation

#1

number = 1000000
#Границы
lower = -100
higher = 100
ms1 = np.random.randint(lower, higher, number)
ms2 = np.random.randint(lower, higher, number)

rand_list1=[]
rand_list2=[]
for i in range(number):
    rand_list1.append(random.randint(lower,higher))
for i in range(number):
    rand_list2.append(random.randint(lower,higher))

#Время через numpy
StartNP = time.perf_counter()
npComposition = np.multiply(ms1, ms2)
TimeNP = time.perf_counter() - StartNP

#Время через лист
StartList = time.perf_counter()
listComposition = []
for i in range(number):
    listComposition.append(rand_list1[i]*rand_list2[i])
TimeList = time.perf_counter() - StartList

print(TimeNP)
print(TimeList)
#2

def hist1():
    arr = np.genfromtxt('data2.csv', delimiter=',', skip_header=1)[:, 4]
    column = arr[np.isfinite(arr)]
    fig = plt.figure(figsize=(6, 4))
    ox = fig.add_subplot()
    ox.set_title('гистограмма')
    ox.set_xlabel('интервалы')
    ox.set_ylabel('колличество значений, попавших в заданые интервалы')
    ox.hist(column, 16)
    ox.grid()

def hist2():
    arr = np.genfromtxt('data2.csv', delimiter=',', skip_header=1)[:, 4]
    column = arr[np.isfinite(arr)]

    fig = plt.figure(figsize=(6, 4))
    ox1 = fig.add_subplot()
    ox1.set_title('нормализованная гистограмма')
    ox1.hist(column, 16, density=True)
    ox1.set_xlabel('интервалы')
    ox1.set_ylabel('вероятность')
    ox1.grid()

    plt.show()

    print(f'среднеквадратическое отклонение - {np.std(column)}')


#3

x = np.linspace(-3, 3, 1000)
y = x * np.cos(x)
z = np.sin(x)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(x, y, z, label='parametric curve')
plt.show()

#4

fig, ax = plt.subplots()
x = np.arange(0, 4*np.pi, 0.001)
y = np.sin(x)
line = plt.plot(x, y)
ax.set_title('y = sin(x)')
ax = plt.axis([0, 4 * np.pi, -1.1, 1.1])
dot, = plt.plot([0], [np.sin(0)], 'go')

def func(i):
    dot.set_data(i, np.sin(i))
    return dot,

animation = FuncAnimation(fig, func, frames=np.arange(0, 4 * np.pi, 0.1), interval=100, repeat=True)
plt.show()
